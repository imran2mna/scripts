heat_template_version: 2016-10-14
description: Create a Load Balancer with round-robin algorithm

parameters:
  public_net:
    type: string
  private_subnet:
    type: string
  pool_name:
    type: string
    default: web-pool


resources:

  lb_monitor:
    type: OS::Neutron::LBaaS::HealthMonitor
    properties:
      type: TCP
      delay: 3
      max_retries: 5
      timeout: 3
      pool: { get_resource: lb_pool }

  lb_pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      name: { get_param: pool_name }
      protocol: HTTP
      lb_algorithm: ROUND_ROBIN
      listener: { get_resource: lb_listener }

  load_balancer:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      vip_subnet: { get_param: private_subnet }

  lb_listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: load_balancer }
      protocol: HTTP
      protocol_port: 80

  vip_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }

  vip_floating_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: vip_floating_ip }
      port_id: { get_attr: [ load_balancer, vip_port_id ] }
      fixed_ip_address: { get_attr: [ load_balancer, vip_address ] }

outputs:
  website_url:
    description: This is the URL that is used to access the load balancer
    value:
      str_replace:
        template: http://lb_floating_address
        params:
          lb_floating_address: { get_attr: [ vip_floating_ip, floating_ip_address ] }