heat_template_version: 2016-10-14
description: Auto Scaling a custom webserver using cpu_util meter

parameters:
  key_name:
    type: string
    default: web-keypair
  instance_name:
    type: string
    default: web-server
  instance_flavor:
    type: string
    default: m2.small
  image_name:
    type: string
    default: web-image
  public_net:
    type: string
  private_net:
    type: string
  private_subnet:
    type: string
  pool_name:
    type: string
  initial_capacity:
    type: number
    default: 1
  cooldown_policy_seconds:
    type: number
    default: 360
  asg_group_min_size:
    type: number
    default: 1
  asg_group_max_size:
    type: number
    default: 2

resources:
  random:
    type: OS::Heat::RandomString
    properties:
      character_classes: [ { "class": lowercase }, { "class": digits } ]
      length: 2

  web_scaler:
    type: OS::Heat::AutoScalingGroup
    properties:
      desired_capacity: { get_param: initial_capacity }
      cooldown: { get_param: cooldown_policy_seconds }
      max_size: { get_param: asg_group_max_size }
      min_size: { get_param: asg_group_min_size }
      resource:
        type: My::Server::Custom::WebServer
        properties:
          instance_name: { list_join: ['-', [ { get_param: instance_name }, { get_attr: [ random, value ] } ] ] }
          instance_flavor: { get_param: instance_flavor }
          image_name: { get_param: image_name }
          key_name: { get_param: key_name }
          public_net: { get_param: public_net }
          private_net: { get_param: private_net }
          private_subnet: { get_param: private_subnet }
          pool_name: { get_param: pool_name }


  scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: web_scaler }
      cooldown: { get_param: cooldown_policy_seconds }
      scaling_adjustment: 1

  scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: web_scaler }
      cooldown: { get_param: cooldown_policy_seconds }
      scaling_adjustment: -1


  lb_conn_rate_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the avg total connections/sec > 2 for 120 secnods
      meter_name: network.services.lb.total.connections.rate 
      statistic: avg
      period: 120
      evaluation_periods: 1
      threshold: 2
      alarm_actions: 
        - { get_attr: [ scaleup_policy, alarm_url ] }
      comparison_operator: gt 
      

  lb_conn_rate_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the avg total connections/sec < 2 for 120 secnods
      meter_name: network.services.lb.total.connections.rate
      statistic: avg
      period: 120
      evaluation_periods: 1
      threshold: 2
      alarm_actions: 
        - { get_attr: [ scaledown_policy, alarm_url ] }
      comparison_operator: lt 

outputs:
  scale_up_webhook:
    description: simulate scaling up by calling the alarm_url 
    value: { get_attr: [ scaleup_policy, alarm_url ] }

  scale_down_webhook:
    description: simulate scaling up by calling the alarm_url 
    value: { get_attr: [ scaledown_policy, alarm_url ] }
