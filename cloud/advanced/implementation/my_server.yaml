heat_template_version: 2016-10-14
description: spawning a custom web server

# Run dry to check the script properly configured.

parameters:
  image_name:
    type: string
    default: web-image
    description: Image used for servers
    constraints:
      - custom_constraint: glance.image
  instance_name:
    type: string
    default: web-server
    description: Name for the web server 
  key_name:
    type: string
    default: web-keypair
    description: SSH key to connect to the servers
    constraints:
      - custom_constraint: nova.keypair
  instance_flavor:
    type: string
    default: m2.small
    description: flavor used by the servers
    constraints:
      - custom_constraint: nova.flavor
  public_net:
    type: string
    default: public
    description: Name of public network into which servers get deployed
    constraints:
      - custom_constraint: neutron.network
  private_net:
    type: string
    default: private
    description: Name of private network into which servers get deployed
    constraints:
      - custom_constraint: neutron.network
  private_subnet:
    type: string
    default: private_subnet
    description: Name of private subnet into which servers get deployed
    constraints:
      - custom_constraint: neutron.subnet


resources:
  wait_handle:
    type: OS::Heat::WaitConditionHandle

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 600

  web_server:
    type: OS::Nova::Server
    properties:
      name: { get_param: instance_name }
      image: { get_param: image_name }
      flavor: { get_param: instance_flavor }
      key_name: { get_param: key_name }
      metadata: { get_param: instance_metadata }
      networks:
        - port: { get_resource: web_net_port }
      user_data_format: RAW
      user_data:
        str_replace: 
          template: |
            #!/bin/bash
            yum -y install httpd 
            systemctl restart httpd.service 
            setsebool -P httpd_can_network_connect_db=1
            sudo cat << EOF > /var/www/html/index.html
            <h1>You are connected to $public_ip</h1>
            <h2>The private IP address is: $private_ip</h2>
            EOF
            export response=$(curl -s -k --output /dev/null --write-out %{http_code} http://$public_ip/)
            [[ ${response} -eq 200 ]] && $wc_notify --data-binary '{ "status" : "SUCCESS"}' || $wc_notify --data-binary '{ "status" : "FAILURE"}'
          params:
            $private_ip: { get_attr: [ web_net_port, fixed_ips, 0 , ip_address ]}
            $public_ip: { get_attr: [ web_floating_ip, floating_ip_address ] }
            $wc_notify: { get_attr: [ wait_handle, curl_cli ] }

  web_net_port: 
    type: OS::Neutron::Port 
    properties:
      network: { get_param: private_net }
      fixed_ips:
        - subnet: { get_param: private_subnet }
      security_groups: [ { get_resource: web_security_group } ]

  web_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: web_net_port }

  web_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for the multi-tier architecture
      name: dev-secgroup
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

outputs:
  
  web_private_ip:
    description: IP address of first web server in private network
    value: { get_attr: [ web_server, first_address ] }
  
  web_public_ip:
    description: Floating IP address of the web server
    value: { get_attr: [ web_floating_ip, floating_ip_address ] }

  website_url:
    description: This URL is the external URL that can be used to access the web server. 
    value:
      str_replace:
        template: http://host/
        params:
          host:  { get_attr: [web_floating_ip, floating_ip_address] }
